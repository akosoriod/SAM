#Test with: http://editor.swagger.io/

swagger: '2.0'
info:
  version: 1.0.0
  title: sam_sessions_ms
  description: Go + MySQL Database
  contact:
      name: David Santiago Barrera Gonzalez
      email: dsbarrerag@unal.edu.co
  license:
    name: Software Architecture 2017-II
host: 192.168.99.101:3000
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /token/{username}:
    get:
      summary: Returns a token signed with the given username
      operationId: GetSessionToken
      parameters:
        - name: username
          in: path
          description: The username of the current user
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Token'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /validate:
    get:
      summary: Validate the given token
      operationId: ValidateSessionToken
      parameters:
        - name: token
          in: header
          description: The token to validate
          required: true
          type: Authorization
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /refresh:
    get:
      summary: Validate the given token and returns a new one
      operationId: RefreshSessionToken
      parameters:
        - name: refresh token
          in: header
          description: The token to validate
          required: true
          type: Authorization
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Token'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /revoke:
    delete:
      summary: Revokes current token refresh_token
      operationId: revokeSessionToken
      parameters:
        - name: token
          in: header
          description: The token to validate
          required: true
          type: Authorization
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /revoke/{username}:
    delete:
      summary: Revokes current token refresh_token
      operationId: revokeSessionToken
      parameters:
        - name: username
          in: path
          description: The username of the current user
          required: true
          type: string

        - name: token
          in: header
          description: The token to validate
          required: true
          type: Authorization

      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:
  Token:
    type: object
    properties:
      token:
        type: string
      refresh:
        type: string

# Errors
  ErrorModel:
    type: object
    properties:
      message:
        type: string
      error:
        type: string
